import java.awt.List;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;


public class SudokuCheck extends Sudoku {

	public SudokuCheck(int[][] array){
		super(array);
	}
	
	
	
	
	public static void main(String[] args) {
		int [][] array = {{1, 2, 3, 4, 5 ,    6, 7 , 8 ,9 },
			    		{4 , 5 , 6 , 7 , 8 , 9 , 1 , 2 , 3 },
			    		{7 , 8 , 9 , 1 , 2 , 3 , 4 , 5 , 6}, 
			    		{ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 }, 
			    		{ 5 , 6 , 7 , 8 , 9 , 1 , 2 , 3 , 4 }, 
			    		{ 8 , 9 , 1 , 2 , 3 , 4 , 5 , 6 , 7 }, 
			    		{ 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 , 2 }, 
			    		{ 6 ,  7 , 8 , 9 , 1 , 2 , 3 , 4 , 5}, 
			    		{ 9 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8}}; 
		Sudoku s1 = new Sudoku(array);
		
		
		System.out.println(check(s1));
	}
	
	
	
		public static boolean  [][] check(Sudoku sudoku){
				
				boolean [][] result = new boolean[3][9];
				boolean [] result1 = new boolean[9];
				
				for (int i = 0; i < 9; i++){
				
				result[0][i] = checkRow(sudoku,i);
				result[1][i] = checkColumn(sudoku,i);
				
				}
						
				/*
				int x = 0;
				int y = 0;
				for (int q = 0; q < 9; q++){
					
					for (int p = 0; p < 3; p++){
						//result[2][q] = checkSquare(sudoku,x,y);
						
						System.out.println(checkSquare(sudoku,x,y));
						//System.out.println(x +" "+ y);
					y += 3;
					}
					x += 3;
					y = 0;
					
					
				}
				
				for (int q = 0; q < 9; q++){
					System.out.println("Ay " + result1[q]);
				}
				*/
				
				//firstblock of sudoku
				result[2][0] = checkSquare(sudoku,0,0);
				result[2][1] = checkSquare(sudoku,0,3);
				result[2][2] = checkSquare(sudoku,0,6);
				result[2][3] = checkSquare(sudoku,3,0);
				result[2][4] = checkSquare(sudoku,3,3);
				result[2][5] = checkSquare(sudoku,3,6);
				result[2][6] = checkSquare(sudoku,6,0);
				result[2][7] = checkSquare(sudoku,6,3);
				result[2][8] = checkSquare(sudoku,6,6);
				

				 System.out.println(Arrays.deepToString(result));
				return result;
		}
	


	
	
	public static boolean checkRow(Sudoku sudoku, int row){

		
		
		for(int k = 0; k < sudoku.getArray()[0].length; k++){
			
			for(int l = 0; l < sudoku.getArray().length; l++){
				
				if( (k!=l) && (sudoku.getArray()[row][k] == sudoku.getArray()[row][l])){
				
				return false;
				}
				
			}
		}
		
		return true;
	}
		
	
	public static boolean checkColumn(Sudoku sudoku, int column){
		for(int k = 0; k < sudoku.getArray().length; k++){
			
			for(int l = 0; l < sudoku.getArray().length; l++){
				
				if( (k!=l) && (sudoku.getArray()[k][column] == sudoku.getArray()[l][column])){
					
					return false;
				}
			}
		}
		return true;
	}
		
	
	
	
	
	public static boolean checkSquare(Sudoku sudoku, int checkRow, int checkCol){
		
		//List<Integer> list = new ArrayList<Integer>(); 
		 int [] smallArray = {1,2,3,4,5,6,7,8,9}; 
		
		ArrayList <Integer> list = new ArrayList<Integer>();
		ArrayList <Integer> listB = new ArrayList<Integer>();
		listB.add(1);listB.add(2);listB.add(3);listB.add(4);listB.add(4);listB.add(5);listB.add(6);listB.add(7);listB.add(8);listB.add(9);
		
		
		int k = checkRow; 
		int l = checkCol;
		
		for(k = checkRow; k < checkRow + 3; k++){
			
			for(l = checkCol; l < checkCol + 3; l++){
				
					//System.out.print(sudoku.getArray()[k][l]);
					list.add(sudoku.getArray()[k][l]);
				}
				
		
			}
		
		
		Collections.sort(list);
		//System.out.println(Arrays.deepToString(list));
		
		//for(k = 0; k < list.size(); k++){
			//System.out.println(list.get(k));
		//}
		
		return list.containsAll(listB);
	}
	}


